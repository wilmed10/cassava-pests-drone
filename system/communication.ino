#define _DEBUG_
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <SPI.h>
#include <Wire.h>
#include <avr/pgmspace.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

const char *ssid = "drone";
const char *password = "mico1234";

// Define the pins for the push buttons
const int btnCamara = 0;
const int btnDeteccion = 02;
const int btnGuardar = 14;
const int btnApagar = 12;

String response = "nada";
int estado=0;

ESP8266WebServer server(81);

// Definir constantes
#define ANCHO_PANTALLA 128 // wide OLED screen
#define ALTO_PANTALLA 64 // high OLED screen

// Objeto de la clase Adafruit_SSD1306
Adafruit_SSD1306 display(ANCHO_PANTALLA, ALTO_PANTALLA, &Wire, -1);

//Imagenes
#define DRON_WIDTH 120
#define DRON_HEIGHT 90
const unsigned char PROGMEM DRON[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x01, 0xff, 0xff, 
0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
0xe0, 0x00, 0x7e, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 
0x01, 0xff, 0x80, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f, 0xc3, 
0x00, 0xc3, 0xfe, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x07, 0xfe, 0x3c, 
0x7f, 0xe0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xfc, 0x7e, 0x3f, 
0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xc7, 0x3c, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x81, 0x90, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x81, 0x90, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x81, 0x90, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xc1, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0f, 0xf8, 0x61, 0xff, 0x0c, 0xc3, 0x10, 0xff, 0x86, 0x1f, 0xf0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x0c, 0x7e, 0x30, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x60, 0x00, 0xfe, 0x3c, 0x3f, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xf0, 0x0f, 0xfe, 0x00, 0x7f, 0xf0, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xff, 0x81, 0x00, 0x81, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xf8, 0x01, 0x00, 0x80, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
0xc0, 0x01, 0x00, 0x80, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
0x3f, 0x81, 0xfc, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 
0xc3, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7e, 
0x0c, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x30, 0x18, 0x0c, 
0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x20, 0x00, 0x04, 0x00, 
0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x20, 0x00, 0x04, 0x00, 0x0f, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x20, 0x00, 0x04, 0x00, 0x07, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x20, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x20, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define CAMARA_WIDTH 86
#define CAMARA_HEIGHT 52
const unsigned char PROGMEM CAMARA[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xe0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x0e, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x3f, 0xff, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x30, 0x00, 
0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x03, 0xff, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
0x00, 0x60, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x3e, 0x01, 
0xf0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x61, 0xf0, 0x78, 0x00, 0x78, 0x00, 0x18, 0x00, 0x00, 
0x00, 0x00, 0x61, 0xf0, 0xe1, 0xff, 0x1c, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x61, 0xf0, 0xe7, 
0xff, 0x8c, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0xe1, 0xcf, 0x03, 0xce, 0x00, 0x18, 0x00, 
0x00, 0x00, 0x00, 0x60, 0x01, 0x9c, 0x00, 0xe6, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 
0x98, 0x00, 0x67, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0x38, 0x00, 0x73, 0x00, 0x18, 
0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0x30, 0x00, 0x33, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 
0x03, 0x70, 0x00, 0x3b, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0x70, 0x00, 0x3b, 0x80, 
0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0x70, 0x00, 0x3b, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 
0x60, 0x03, 0x30, 0x00, 0x3b, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0x30, 0x00, 0x33, 
0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0x38, 0x00, 0x73, 0x00, 0x18, 0x00, 0x00, 0x00, 
0x00, 0x60, 0x03, 0x98, 0x00, 0x67, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x9c, 0x00, 
0xe6, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0xcf, 0x03, 0xce, 0x00, 0x18, 0x00, 0x00, 
0x00, 0x00, 0x60, 0x00, 0xe7, 0xff, 0x8c, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xe1, 
0xfe, 0x1c, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x78, 0x30, 0x78, 0x00, 0x18, 0x00, 
0x00, 0x00, 0x00, 0x60, 0x00, 0x3e, 0x01, 0xf0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
0x0f, 0xff, 0xc0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x03, 0xff, 0x80, 0x00, 0x18, 
0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x18, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 
0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define LUPA_WIDTH 86
#define LUPA_HEIGHT 52
const unsigned char PROGMEM LUPA[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x07, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7f, 0x18, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xe3, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x67, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x7e, 0x3b, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0xe7, 0xd9, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0x90, 0x00, 0xed, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb0, 0x00, 0x26, 
0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00, 0x06, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0x60, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 
0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 
0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x02, 0x40, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
0x20, 0x00, 0x06, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb0, 0x00, 0x04, 0x80, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x00, 0x0d, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xcc, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x33, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x80, 0xe7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x19, 0xff, 0x8c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1c, 0x3c, 
0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0xe6, 0x30, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xff, 0x83, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x71, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xe0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0e, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define USB_WIDTH 40
#define USB_HEIGHT 50
const unsigned char PROGMEM USB[]={
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 
0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0xf3, 0xe0, 0x00, 0x00, 0x01, 
0xe1, 0xe0, 0x00, 0x00, 0x03, 0xc0, 0xf8, 0x00, 0x00, 0x07, 0x80, 0x78, 0x00, 0x00, 0x7f, 0x38, 
0x3e, 0x00, 0x00, 0xfe, 0x78, 0x1f, 0x00, 0x01, 0xfc, 0x70, 0x0f, 0x00, 0x03, 0xde, 0x70, 0x07, 
0x00, 0x07, 0x8f, 0x01, 0x87, 0x00, 0x0f, 0x07, 0x83, 0x8f, 0x00, 0x1e, 0x03, 0xc7, 0x9e, 0x00, 
0x3c, 0x01, 0xe7, 0xbc, 0x00, 0x78, 0x00, 0xf2, 0x78, 0x00, 0xf0, 0x00, 0x78, 0xf0, 0x01, 0xe0, 
0x00, 0x3d, 0xe0, 0x03, 0xc0, 0x00, 0x1f, 0xc0, 0x07, 0x81, 0x38, 0x0f, 0x80, 0x0f, 0x03, 0x38, 
0x07, 0x80, 0x1e, 0x03, 0x78, 0x03, 0x80, 0x3c, 0x06, 0xf8, 0x07, 0x80, 0x78, 0x07, 0xdc, 0x0f, 
0x00, 0xf0, 0x03, 0xfc, 0x1e, 0x00, 0xe0, 0x0f, 0xf0, 0x3c, 0x00, 0xc0, 0x0e, 0x00, 0x78, 0x00, 
0xc0, 0x0e, 0x00, 0xf0, 0x00, 0xc0, 0x00, 0x01, 0xe0, 0x00, 0xe0, 0x00, 0x03, 0xc0, 0x00, 0xf0, 
0x00, 0x07, 0x80, 0x00, 0x78, 0x00, 0x0f, 0x00, 0x00, 0x3c, 0x00, 0x1e, 0x00, 0x00, 0x1e, 0x00, 
0x3c, 0x00, 0x00, 0x0f, 0x00, 0x78, 0x00, 0x00, 0x07, 0x80, 0xf0, 0x00, 0x00, 0x03, 0xc1, 0xe0, 
0x00, 0x00, 0x01, 0xe3, 0xc0, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define APAGAR_WIDTH 50
#define APAGAR_HEIGHT 40
const unsigned char PROGMEM APAGAR[] = {
0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc3, 0xf0, 0xf0, 0x00, 
0x00, 0x00, 0x0f, 0xe3, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xe3, 0xf1, 0xfc, 0x00, 0x00, 0x00, 
0x3f, 0xe3, 0xf1, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xe3, 0xf1, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xc3, 
0xf0, 0xff, 0x80, 0x00, 0x00, 0x7f, 0x83, 0xf0, 0x7f, 0xc0, 0x00, 0x00, 0xff, 0x03, 0xf0, 0x3f, 
0xc0, 0x00, 0x01, 0xff, 0x03, 0xf0, 0x1f, 0xe0, 0x00, 0x01, 0xfe, 0x03, 0xf0, 0x1f, 0xe0, 0x00, 
0x01, 0xfc, 0x03, 0xf0, 0x0f, 0xe0, 0x00, 0x01, 0xfc, 0x03, 0xf0, 0x0f, 0xe0, 0x00, 0x03, 0xf8, 
0x03, 0xf0, 0x07, 0xf0, 0x00, 0x03, 0xf8, 0x03, 0xf0, 0x07, 0xf0, 0x00, 0x03, 0xf8, 0x03, 0xf0, 
0x07, 0xf0, 0x00, 0x03, 0xf8, 0x01, 0xe0, 0x07, 0xf0, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x07, 0xf0, 
0x00, 0x03, 0xf8, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x01, 
0xfc, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x01, 0xfe, 0x00, 
0x00, 0x1f, 0xe0, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x3f, 
0xc0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0xff, 0x80, 0x00, 
0x00, 0x3f, 0xf8, 0x07, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x1f, 
0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 
0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00
};

void setup() {
  Serial.begin(115200);
  WiFi.softAP(ssid, password);

  IPAddress IP = WiFi.softAPIP();
  Serial.print("Dirección IP del AP: ");
  Serial.println(IP);

  // Configure the push button pins as inputs with pull-up resistor
  pinMode(btnCamara, INPUT_PULLUP);
  pinMode(btnDeteccion, INPUT_PULLUP);
  pinMode(btnGuardar, INPUT_PULLUP);
  pinMode(btnApagar, INPUT_PULLUP);

    // Start OLED display at address 0x3C
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
#ifdef _DEBUG_
    Serial.println("No se encuentra la pantalla OLED");
#endif
    while (true);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("   Deteccion Dron");
  display.display();

  display.drawLine(0, 10, 128, 10, WHITE);
  display.display();
  display.drawBitmap( (display.width() - DRON_WIDTH) /4, ((display.height() - DRON_HEIGHT) /4) , DRON, DRON_WIDTH, DRON_HEIGHT, WHITE);
  display.display();
  delay(1000);

  server.on("/", handleRoot);
  server.begin();
}

void Menu() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("        MODOS");
  display.display();

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,20);
  display.println(" 1. Video             2. Iniciar deteccion 3. Guardar deteccion 4. Apagar RPI");
  display.display();
  delay(1000);
}

void loop() {
  server.handleClient();
  bool botonPresionado = false;
  
  while (estado==0){
    sendCommandToRaspberryPi("gps");
    if(response == "nada"){
      display.clearDisplay();
      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setCursor(0,30);
      display.println("Esperando coordenadas");
      display.display();
      delay(2000);
    }else { 
      estado=1;
    }
  }

  do {
    Menu();
   // Read the status of the buttons
    if (!digitalRead(btnCamara) || !digitalRead(btnDeteccion) || !digitalRead(btnGuardar) || !digitalRead(btnApagar)) {
      botonPresionado = true;
    }else {
      sendCommandToRaspberryPi("dime");
    }
 
  } while (!botonPresionado);

  if (!digitalRead(btnCamara)) {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.println("        Video");
    display.display();
    display.drawBitmap( (display.width() - CAMARA_WIDTH) /2 , ((display.height() - CAMARA_HEIGHT) /2)+7, CAMARA, CAMARA_WIDTH, CAMARA_HEIGHT, WHITE);
    display.display();
    Serial.println("boton1");
    delay(500);
    sendCommandToRaspberryPi("button1");    
  } else if (!digitalRead(btnDeteccion)) {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.println("  Iniciar Deteccion");
    display.display();
    display.drawBitmap( (display.width() - LUPA_WIDTH) /2, ((display.height() - LUPA_HEIGHT) /2)+7, LUPA, LUPA_WIDTH, LUPA_HEIGHT, WHITE);
    display.display();
    Serial.println("boton2");
    delay(500);
    sendCommandToRaspberryPi("button2");
  } else if (!digitalRead(btnGuardar)) {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.println("  Guardar deteccion");
    display.display();
    display.drawBitmap( (display.width() - USB_WIDTH)-5, ((display.height() - USB_HEIGHT) ), USB, USB_WIDTH, USB_HEIGHT, WHITE);
    display.display();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0,50);
    display.println("Almacenando");
    display.display();
    Serial.println("boton3");
    delay(500);
    sendCommandToRaspberryPi("button3");
  } else if (!digitalRead(btnApagar)) {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.println("      Apagar RPI");
    display.display();
    display.drawBitmap( (display.width() - APAGAR_WIDTH)/2, ((display.height() - APAGAR_HEIGHT)/2 )+9, APAGAR, APAGAR_WIDTH, APAGAR_HEIGHT, WHITE);
    display.display();
    Serial.print("boton4");
    delay(500);
    sendCommandToRaspberryPi("button4");
  }
}

void handleRoot() {
  server.send(200, "text/plain", "¡Hola! Has llegado al ESP8266.");
}

void sendCommandToRaspberryPi(String command) {
  WiFiClient client;
    if (client.connect("192.168.4.200", 8081)) { // Raspberry Pi IP address on ESP8266 network
      client.print(command);
      // Wait for a response from the Raspberry Pi
      while (client.connected() || client.available()) {
        if (client.available()) {
          response = client.readStringUntil('\n'); // Read the answer
          // Display the answer on the OLED screen
          
          if (response != "nada") {
            display.clearDisplay();
            display.setTextSize(1);
            display.setTextColor(WHITE);
            display.setCursor(5,30);
            display.println(response);
            display.display();
            delay(3000);
            Serial.println("Respuesta de Raspberry Pi: " + response); // Display on serial console
          }

        }
      }
      client.stop();
    }
}